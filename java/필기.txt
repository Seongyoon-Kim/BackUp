1. JDK & 

2. 

3. Path 설정

4. 예제 만들기 & 실행


[JDK, Java Development Kit, 자바 개발 도구]
- JDK 1.0 ~ 1.15
- JAVA 1 ~ 16
- JDK 1.8 설치(수업)
- 프로그램 소스 -> 프로그램 실행 파일
- 개발에 필요한 기능들을 제공하는 도구 모음 (프로그램의 집합)


[JRE, Java Runtime Environment, 자바 실행 환경]
- 자바로 만든 프로그램이 실행할 수 있는 여러가지 환경을 제공
- JRE 1.8


[Hello.java]
- 소스 파일
- 프로그래밍 구문(소스)들을 적어 놓은 파일
- 확장자(.java)
- 포맷(텍스트 파일)
- 프로그래밍 구문 -> 자바 언어로 구성 -> 수많은 명령어들의 집합 -> 컴퓨터가 실행해야 할 명령어들의 집합


[Compile, 컴파일]
- 프로그램 소스를 기계어(이진 코드)로 번역하는 작업
- Compiler, 컴파일러 : 번역하는 전문 프로그램
- Java Compiler -> JDK 내에 포함 -> javac.exe
- 사용법
	> javac.exe 자바소스파일명 (With 경로)
	> javac.exe Hello.java // 1차 컴파일
- 컴파일의 결과물 : 번역을 마친 번역본 (기계어로 되어 있는 파일) > Hello.class (클래스 파일 & 실행 파일)


[Hello.class]
- 클래스 파일
- 자바가 아닌 다른 언어들은 이 파일이 기계어(0,1)로 번역되어 있다.
- 최근 언어(자바, C# 등)들은 이 결과물이 중간 언어(IL)로 번역되어 있다.


** 자바는 번역을 2번한다.
- 1차 컴파일
- 2차 컴파일


Hello.class -> 기계어
- java.exe
- java.exe 클래스명
> java.exe Hello // Hello.class 번역본의 내용을 진짜 기계어로 번역하고, 번역된 기계어를 실행까지 한다.
- 번역 결과는 남기지 않는다. (번역본을 만들지 않는다.)


Hello.java -> 1차 번역 (javac.exe) -> Hello.class -> 2차번역 (java.exe) -> 번역 X, 즉시 실행


[명령어 실행 주체]
- 컴퓨터
	CPU (연산 장치) : 프로그램의 명령어들을 실행시키는 역할
	RAM, Memory (주 기억 장치)
	HDD, SSD (보조 기억 장치)
	Graphic Card (GPU.. 등)
	NIC (LAN Card)
	Power
	MainBoard

- CPU
	- 처리 가능한 데이터의 형태 : 0, 1 (전기 신호) -> 바이너리 (Binary Data), 이진 데이터


source -> src


/ : slash
\ : 역슬래쉬		
~ : tilde
!
@ : at sign
# : hash, shop
$
%
^ : xor, Circumflex
&
*
| : vertical bar, pipe
- : dash, hypen, minus
_ : under bar, under line
"" : double quote
'' : single quote
` : back quote(역따옴표)


괄호
		
{} : 중괄호
() : 소괄호
[] : 대괄호
<> : 화살표 괄호


A > B : A가 B보다 크다 (초과)
A < B : A가 B보다 작다 (미만)
A >= B : A는 B보다 크거나 같다 (이상)
A <= B : A는 B보다 작거나 같다 (이하)


1 I l | : !










[복습]
1. 자료형(***)

2. 콘솔 출력(print, println, printf(%n))

3. 콘솔 입력(System.in.read(X), BufferedReader)

4. 연산자(***)

5. 형변환(암시적, 명시적)



[코드 조각 정리]

- 상용구(자주 사용하는 변하지 않는 패턴의 코드) > 외우기

- text file(*.md) or gist




[코드 리뷰]
- 코드 작성(A) -> 본인 검증 -> 다른 사람 코드 통합 -> 제품 출시
- 코드 작성(A) -> 나머지 사람(B, C, D) -> A의 코드 검토 -> 검증 -> 다른 사람 코드 통합 -> 제품 출시
- 프로그램 안정성 향상(70%)




[코드 리뷰 작성]
- 롤링 페이퍼 형식의 개인 리뷰 / 집단 리뷰(토론)
- 개인 리뷰 시간(20 - 25%) < 집단 리뷰 시간(75 - 80%)
- 대상: 수업 문제(7문제)

1. 프로그램 input / output 테스트 및 검증
- 테스트 사례(5 - 10회) > 산출물: 스크린샷
- 코드 작성자 제외(나머지 팀원들)

2. 오류 확인(코드 대상)
 - 오류 검색
 - 오류 발견 시 해결 방안 논의
 - 산출물: 코드 직접 주석

3. 성능 및 개선안
 - 코드에 대한 성능 평가
 - 개선안 논의
 - 산출물: 코드 직접 주석

-------------------------------------------------------------------------

지난 주 연산자 7문제 대상
1. 팀당 5명 > 7 * 5 = 35개 (X)
 - 문제당 1파일 리뷰
 - 7개의 리뷰

2. 제출
 - 소스 파일(리뷰 주석 추가)
 - 테스트 스크린샷

3. 진행 형태
 - 강의실: 모여서
 - 줌(미팅), 구글 미팅, 카톡 > 팀방
 - 팀장 선출













